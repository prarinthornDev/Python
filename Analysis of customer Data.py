# -*- coding: utf-8 -*-
"""สำเนาของ 056 DecisionTree .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HzBE_WQxExYDIwHdEcASEPabHEWtil7J

# **Data + Convert**
"""

import pandas as pd 
import matplotlib.pyplot as plt 
import numpy as np 
import seaborn as sns
import datetime

df = pd.read_csv("https://raw.githubusercontent.com/60122201056/FileData/main/TransactionUTF.csv")

"""# ลูกค้าที่ได้รับ SMS(REDCROSS_SMS=Y) ซื้อโดยเฉลี่ยทั้งหมดกี่บาท/คน"""

def count_cus_sell_after_sms (df):
  cus_no_sms = df[df.REDCROSS_SMS == 'N'] 
  n_row , n_col = cus_no_sms.shape

  cus_sms = df[df.REDCROSS_SMS == 'Y'] 
  total_all = cus_sms['AMOUNT'].sum()
  R_before , C_before =  cus_sms.shape

  num_cus_all = n_row+ R_before

  df_test = cus_sms.groupby('CUSTOMERNAME').nunique()
  dfs = pd.DataFrame(df_test)
  cus_rows , columns  = dfs.shape

  avg_amount = cus_sms['AMOUNT'].sum() /cus_rows

  show_sell_avg(num_cus_all,n_row,R_before,total_all,avg_amount)

def show_sell_avg(all,n,y,sell,avg):
  print('All Customer', all , sep=' --- ')
  print('REDCROSS_SMS=Y ', y , sep=' --- ')
  print('Total Amount (REDCROSS_SMS=Y)', sell ,sep=' --- ')
  print('AVG amount (REDCROSS_SMS=Y) --- {:.2f}'.format(avg))
  
  #print('จำนวนลูกค้าทั้งหมด', all , sep=' --- ')
  #print('จำนวนลูกค้าที่ได้รับ SMS', y , sep=' --- ')
  #print('ยอดซื้อขายรวมของลูกค้าที่ได้รับ SMS', sell ,sep=' --- ')
  #print('ยอดซื้อขายโดยเฉลี่ยทั้งหมด --- {:.2f} บาท ต่อคน'.format(avg))

count_cus_sell_after_sms(df)

"""# ลูกค้าที่ได้รับ SMS ซื้อโดยเฉลี่ยทั้งหมดกี่บาท/บิล (CASHNO)"""

def count_cus_bill_after_sms(df):
  cus_no_sms = df[df.REDCROSS_SMS == 'N'] 
  n_row , n_col = cus_no_sms.shape

  cus_sms = df[df.REDCROSS_SMS == 'Y'] 
  total_all = cus_sms['AMOUNT'].sum()
  R_before , C_before =  cus_sms.shape

  num_cus_all = n_row+ R_before

  df_test = cus_sms.groupby('CASHNO').nunique()
  dfs = pd.DataFrame(df_test)
  cus_rows , columns  = dfs.shape

  avg_bill = cus_sms['AMOUNT'].sum() /cus_rows

  show_bill(num_cus_all, n_row, R_before, total_all, avg_bill, cus_rows)

def show_bill(all,n,y,sell,avg,bill_alll):
  print('All Customer', all , sep=' --- ')
  print('REDCROSS_SMS=Y ', y , sep=' --- ')
  print('Total Amount (REDCROSS_SMS=Y)', sell ,sep=' --- ')
  print('Count_ bill  (REDCROSS_SMS=Y)', bill_alll ,sep=' --- ')
  print('AVG _ bill  (REDCROSS_SMS=Y) --- {:.2f}'.format(avg))
  #print('จำนวนลูกค้าทั้งหมด', all , sep=' --- ')
  #print('จำนวนลูกค้าที่ได้รับ SMS', y , sep=' --- ')
  #print('ยอดซื้อขายรวมของลูกค้าที่ได้รับ SMS', sell ,sep=' --- ')
  #print('ยอดซื้อขายโดยเฉลี่ยทั้งหมด --- {:.2f} บาท ต่อคน'.format(avg))

count_cus_bill_after_sms(df)

"""# ลูกค้าที่ได้รับ SMS ซื้อสินค้าในช่วงเวลาใด เท่าไรบ้าง (ใน 24 ชม.)"""

def count_sell_hr(df,time):
  n_time = time +1
  if (time < 10):
    time = '0' + str(time)
  else:
    time = str(time)

  r_time = print_time(time,n_time)
  tepm_df = count_time(df,time)
  bill = tepm_df['new_TIME'].str.count(str(time)).sum()
  return r_time , bill 

def print_time(time , n):
  return time + '.00  - ' ,n ,'.00' 

def count_time(df,time):
  temp = df[df.new_TIME == time] 
  return temp


def cal_value_time(df,time):
  if (time < 10):
    time = '0' + str(time)
  else:
    time = str(time)
  temp_df = df[df.new_TIME == time] 
  return  temp_df['AMOUNT'].sum()


#-------------------------------------Run!-----------------------------------------------#
df['new_TIME'] = df['CASHDATE'].map(lambda x : to_string(x[11:13]))
newDF = df[df.REDCROSS_SMS == 'Y'] 

for i in range(24):
  a,b = count_sell_hr(newDF,i)
  print('ช่วงเวลา' , a)
  print('จำนวนการสั่งซื้อ' , b)
  print('ยอดการสั่งซื้อรวม  {:.2f}'.format(cal_value_time(newDF,i)))
  print()
#-----------------------------------------------------------------------------------------#

"""# ลูกค้าที่ได้รับ SMS ซื้อสินค้าในวันใด เท่าไรบ้าง (จัน-อา)"""

import datetime
#datetime.datetime.today()
#datetime.datetime(x[0], x[1],x[2], 0, 0, 0, 0).weekday()
#datetime.datetime.today().weekday()
def count_wn(df,week_name):
  result = df['new_DAY'].str.count(week_name).sum()
  #M = df['new_DAY'].str.count('Monday').sum()
  #T = df['new_DAY'].str.count('Tuesday').sum()
  #W = df['new_DAY'].str.count('Wednesday').sum()
  #Th  = df['new_DAY'].str.count('Thursday').sum()
  #F = df['new_DAY'].str.count('Friday').sum()
  #Sa  = df['new_DAY'].str.count('Saturday').sum()
  #S = df['new_DAY'].str.count('Sunday').sum()
  #return M,T,W,Th,F,Sa,S,(M+T+W+Th+F+Sa+S)
  return result

def week_name(x):
  name = ' '
  if x == 0:
    name = 'Monday'
  elif x == 1 :
    name = 'Tuesday'
  elif x == 2 :
    name = 'Wednesday'
  elif x == 3 :
    name = 'Thursday'
  elif x == 4 :
    name = 'Friday '
  elif x == 5 :
    name = 'Saturday'
  elif x == 6 :
    name = 'Sunday'
  return name

def find_weekday (x):
  x = x.split('-')
  x = [int(i) for i in x]
  weekday = datetime.datetime(x[0], x[1],x[2], 0, 0, 0, 0).weekday()
  return week_name(weekday)

def count_value(df , week_name):
  df_v = newDF[newDF.new_DAY == week_name]
  return df_v['AMOUNT'].sum()
  
#-------------------------------------Run!-----------------------------------------------#
df['new_DAY'] = df['CASHDATE'].map(lambda x : find_weekday(x[:10]))
newDF = df[df.REDCROSS_SMS == 'Y'] 


list_name = ['Monday','Tuesday', 'Wednesday', 'Thursday', 'Friday ','Saturday','Sunday']
for i in list_name:
  print('Day', i ,' : ', count_wn(newDF,i) , ' : bill')
  print('Day', i ,' : ', count_value(newDF,i) , ' : bath')
  print()
#print(count_wn(df,'Monday'))
#print(count_value(df,'Monday'))
#-----------------------------------------------------------------------------------------#

"""# ลูกค้าที่ได้รับ SMS ซื้อสินค้าอะไรบ้าง Top 10 (Productcode, name, amount, quality)"""

#------------------------------------------------------------------------------------------------------------------#

df4 = pd.DataFrame()
df4 = df[['PRODUCTCODE','PRODUCTNAMETHAI','AMOUNT','QUANTITY','REDCROSS_SMS']].copy()
df4 = df4[df.REDCROSS_SMS == 'Y'] 
#df4['PRODUCTCODE'] = df['PRODUCTCODE']
#df4['PRODUCTNAMETHAI'] = df['PRODUCTNAMETHAI']
#df4['AMOUNT'] = df['AMOUNT']
#df4['QUANTITY'] = df['QUANTITY']


df4

"""# ลูกค้ามีช่องทางการซื้อเป็นอย่างไร เท่าไรบ้าง SALESMANCODE_CHANNEL [Shoppee C087, Lazada C089, RedCross C033, Delivery C081]"""

#SALESMANCODE_CHANNEL

def replace_name (x):
  if (x == 'C083'):
    return 'Shoppee'
  elif (x == 'C089'):
    return 'Lazada'
  elif (x == 'C033'):
    return 'RedCross'
  elif (x == 'C081'):
    return 'Delivery'
  else:
    return 'Unknow'

def count_ (df):
  row , col = df.shape
  return row 

def count_v (df):
  return df['AMOUNT'].sum()

def countAll (df):
  return count_(df) , count_v (df)
  
#C087 -> C083 SHOPPEE
#-------------------------------------Run!-----------------------------------------------#
df['S_CODE_Ch_NAME'] = df['SALESMANCODE_CHANNEL'].map(lambda x : replace_name(x))

#cus_sms = df[df.REDCROSS_SMS == 'Y'] 

shoppee = df[df.S_CODE_Ch_NAME == 'Shoppee'] 
lazada  = df[df.S_CODE_Ch_NAME == 'Lazada'] 
redCross = df[df.S_CODE_Ch_NAME == 'RedCross'] 
delivery = df[df.S_CODE_Ch_NAME == 'Delivery'] 
unknow =  df[df.S_CODE_Ch_NAME == 'Unknow'] 

#num // value

print(' Shoppee  : '  ,countAll(shoppee)[0] , 'ครั้ง  {:.2f}'.format(countAll(shoppee)[1])  ,'[บาท]')
print(' lazada  : '  ,countAll(lazada)[0] , 'ครั้ง  {:.2f}'.format(countAll(lazada)[1])  ,'[บาท]')
print(' redCross  : ' ,countAll(redCross)[0] , 'ครั้ง  {:.2f}'.format(countAll(redCross)[1])  ,'[บาท]')
print(' delivery  : '  ,countAll(delivery)[0] ,'ครั้ง  {:.2f}'.format(countAll(delivery)[1])  ,'[บาท]')
print(' unknow  : '  ,countAll(unknow)[0] ,'ครั้ง  {:.2f}'.format(countAll(unknow)[1])  ,'[บาท]')
#-----------------------------------------------------------------------------------------#